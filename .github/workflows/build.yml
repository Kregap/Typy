name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting checks
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run full check
        run: npm run check

  build:
    name: Build Electron App
    runs-on: ${{ matrix.os }}
    needs: quality-checks

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Fix Electron sandbox permissions (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo chown root:root node_modules/electron/dist/chrome-sandbox
          sudo chmod 4755 node_modules/electron/dist/chrome-sandbox

      - name: Test application structure
        run: |
          # Verify all required files exist
          test -f src/main/main.js
          test -f src/main/preload.js
          test -f src/renderer/index.html
          test -f src/renderer/about.html
          test -f src/renderer/editor.js
          test -f src/assets/icon.ico
          test -f src/assets/sample.md
          echo "✅ All required files present"

          # Test that package.json is valid
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
          echo "✅ package.json is valid JSON"

          # Test that main entry point is correctly specified
          node -e "const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8')); if (!pkg.main) throw new Error('No main entry point'); console.log('✅ Main entry point:', pkg.main)"

          # Test that the main process file syntax is valid (without running Electron)
          node -c src/main/main.js
          node -c src/main/preload.js
          node -c src/renderer/editor.js
          echo "✅ All JavaScript files have valid syntax"

          # Test application startup in headless mode (Linux only)
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Testing application startup in headless mode..."
            ELECTRON_DISABLE_SANDBOX=true timeout 10s npm start -- --version || echo "Application startup test completed"
          fi

      - name: Test application startup (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Testing application startup on Windows..."
          npm start -- --version

      - name: Package application (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          npx electron-packager . Typy --platform=win32 --arch=x64 --out=dist --overwrite
          echo "Build completed successfully"

      - name: Upload build artifacts (Windows only)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: typy-windows-build
          path: dist/
          retention-days: 7
